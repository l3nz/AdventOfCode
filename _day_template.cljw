;; gorilla-repl.fileformat = 1

;; **
;;; # Day X
;;; 
;;; 	
;; **

;; @@
(ns aoc17dXXX
  (:require [gorilla-plot.core :as plot]
            [clojure.string :as s]))
;; @@
;; =>
;;; {"type":"html","content":"<span class='clj-nil'>nil</span>","value":"nil"}
;; <=

;; @@
(defn parse-int
  "Parses integer - throws an exception"
  [s]
  (Integer. #^String (re-find  #"-*\d+" s )))

(defn str->lines [txt]
  (s/split txt #"\n"))

(defn assertSpy [myfn in expout]
  (let [out (myfn in)]
    (assert (= expout out) (str "Input: " in " out:" out " exp:" expout ))))

;; @@
;; =>
;;; {"type":"html","content":"<span class='clj-var'>#&#x27;aoc17dXXX/assertSpy</span>","value":"#'aoc17dXXX/assertSpy"}
;; <=

;; @@
(def MYKEY "")
;; @@
;; =>
;;; {"type":"html","content":"<span class='clj-var'>#&#x27;aoc17dXXX/MYKEY</span>","value":"#'aoc17dXXX/MYKEY"}
;; <=

;; @@

;; @@

;; @@
;(assert (= (ex1 "1122") 3))

;; @@

;; @@
;(ex1 MYKEY)
;; @@

;; @@
;(ex2 MYKEY)
;; @@

;; @@

;; @@
