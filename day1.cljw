;; gorilla-repl.fileformat = 1

;; **
;;; # Day one
;;; 
;;; 	
;; **

;; @@
(ns aoc17d1
  (:require [gorilla-plot.core :as plot]))
;; @@
;; =>
;;; {"type":"html","content":"<span class='clj-nil'>nil</span>","value":"nil"}
;; <=

;; @@
(def MYVAL "61697637962276641366442297247367117738114719863473648131982449728688116728695866572989524473392982963976411147683588415878214189996163533584547175794158118148724298832798898333399786561459152644144669959887341481968319172987357989785791366732849932788343772112176614723858474959919713855398876956427631354172668133549845585632211935573662181331613137869866693259374322169811683635325321597242889358147123358117774914653787371368574784376721652181792371635288376729784967526824915192526744935187989571347746222113625577963476141923187534658445615596987614385911513939292257263723518774888174635963254624769684533531443745729344341973746469326838186248448483587477563285867499956446218775232374383433921835993136463383628861115573142854358943291148766299653633195582135934544964657663198387794442443531964615169655243652696782443394639169687847463721585527947839992182415393199964893658322757634675274422993237955354185194868638454891442893935694454324235968155913963282642649968153284626154111478389914316765783434365458352785868895582488312334931317935669453447478936938533669921165437373741448378477391812779971528975478298688754939216421429251727555596481943322266289527996672856387648674166997731342558986575258793261986817177487197512282162964167151259485744835854547513341322647732662443512251886771887651614177679229984271191292374755915457372775856178539965131319568278252326242615151412772254257847413799811417287481321745372879513766235745347872632946776538173667371228977212143996391617974367923439923774388523845589769341351167311398787797583543434725374343611724379399566197432154146881344528319826434554239373666962546271299717743591225567564655511353255197516515213963862383762258959957474789718564758843367325794589886852413314713698911855183778978722558742329429867239261464773646389484318446574375323674136638452173815176732385468675215264736786242866295648997365412637499692817747937982628518926381939279935993712418938567488289246779458432179335139731952167527521377546376518126276")
;; @@
;; =>
;;; {"type":"html","content":"<span class='clj-var'>#&#x27;aoc17d1/MYVAL</span>","value":"#'aoc17d1/MYVAL"}
;; <=

;; @@
; Trasforma una stringa di numeri in un vettore di interi,
; aggiungendo in fondo il primo valore
(defn vals-as-vec 
  [s]
  (mapv #(java.lang.Integer. (str %)) s))

(defn rotate
  [sq offs]
  
  (->> sq
       cycle
       (drop offs)
       (take (count sq)))
  
  )


(defn compute 
  [in offs]
  (let [v (vals-as-vec in)]
  	(apply + 
           (map (fn [a b] 
           			(if (= a b) a 0)) 
                	v 
                	(rotate v offs)))))
  
  

 (defn ex1 [s] (compute s 1))

 (defn ex2 [s] (compute s (/ (count s) 2)))
 

;; @@
;; =>
;;; {"type":"html","content":"<span class='clj-var'>#&#x27;aoc17d1/ex2</span>","value":"#'aoc17d1/ex2"}
;; <=

;; @@
(assert (= (ex1 "1122") 3))
(assert (= (ex1 "1111") 4))
(assert (= (ex1 "1234") 0))
(assert (= (ex1 "91212129") 9))

(assert (= (ex2 "1212") 6))
(assert (= (ex2 "1221") 0))
(assert (= (ex2 "123425") 4))
(assert (= (ex2 "123123") 12))
(assert (= (ex2 "123123") 12))

;1221 produces 0, because every comparison is between a 1 and a 2.
;123425 produces 4, because both 2s match each other, but no other digit has a match.
;123123 produces 12.
;12131415 produces 4.

;; @@
;; =>
;;; {"type":"html","content":"<span class='clj-nil'>nil</span>","value":"nil"}
;; <=

;; @@
(ex1 MYVAL)
;; @@
;; =>
;;; {"type":"html","content":"<span class='clj-long'>1182</span>","value":"1182"}
;; <=

;; @@
(ex2 MYVAL)
;; @@
;; =>
;;; {"type":"html","content":"<span class='clj-long'>1152</span>","value":"1152"}
;; <=

;; @@

;; @@
